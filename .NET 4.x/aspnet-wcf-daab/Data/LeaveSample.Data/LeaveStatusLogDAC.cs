//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.4841.16573)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Serena Yeoh at ALIENWARE on 05/08/2013 11:16:37 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using LeaveSample.Entities;

// NOTE:
//
// Data access components are responsible for querying and persisting data for
// the application. All database related processing should be done here.
//
// All the CRUD activities are done here in this component to isolate them from 
// higher level components in the layer. This should allow upgrades or change of
// data access technologies as required.
//
// It is not necessary that each Data Access Component to be mapped directly to an
// individual table. In larger systems, one DAC may manage the CRUD activities for
// one or more tables/Entities.

namespace LeaveSample.Data
{
    /// <summary>
    /// LeaveStatusLogs data access component. Manages CRUD operations for the LeaveStatusLogs table.
    /// </summary>
    public partial class LeaveStatusLogDAC : DataAccessComponent
    {

        /// <summary>
        /// Inserts a new row in the LeaveStatusLogs table.
        /// </summary>
        /// <param name="leaveStatusLog">A LeaveStatusLog object.</param>
        /// <returns>An updated LeaveStatusLog object.</returns>
        public LeaveStatusLog Create(LeaveStatusLog leaveStatusLog)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LeaveStatusLogs ([LeaveID], [Status], [Date]) " +
                "VALUES(@LeaveID, @Status, @Date); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@LeaveID", DbType.Int64, leaveStatusLog.LeaveID);
                db.AddInParameter(cmd, "@Status", DbType.Byte, leaveStatusLog.Status);
                db.AddInParameter(cmd, "@Date", DbType.DateTime, leaveStatusLog.Date);

                // Get the primary key value.
                leaveStatusLog.LogID = Convert.ToInt64(db.ExecuteScalar(cmd));
            }

            return leaveStatusLog;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LeaveStatusLogs table.
        /// </summary>
        /// <param name="leaveID">A leaveID value.</param>
        /// <returns>A collection of LeaveStatusLog objects.</returns>		
        public List<LeaveStatusLog> SelectByLeave(long leaveID)
        {
            const string SQL_STATEMENT =
                "SELECT [LogID], [LeaveID], [Status], [Date] " +
                "FROM dbo.LeaveStatusLogs " +
                "WHERE [LeaveID]=@LeaveID " +
                "ORDER BY [Date] DESC";

            List<LeaveStatusLog> result = new List<LeaveStatusLog>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@LeaveID", DbType.Int64, leaveID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LeaveStatusLog
                        LeaveStatusLog leaveStatusLog = new LeaveStatusLog();

                        // Read values.
                        leaveStatusLog.LogID = base.GetDataValue<long>(dr, "LogID");
                        leaveStatusLog.LeaveID = base.GetDataValue<long>(dr, "LeaveID");
                        leaveStatusLog.Status = base.GetDataValue<LeaveStatuses>(dr, "Status");
                        leaveStatusLog.Date = base.GetDataValue<DateTime>(dr, "Date");

                        // Add to List.
                        result.Add(leaveStatusLog);
                    }
                }
            }

            return result;
        }
    }
}
